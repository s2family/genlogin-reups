const s="SHA-256",a="SALT",i="PASSWORD";const y=async(e,t,n,r,c)=>{const o=new TextEncoder,p=o.encode(n),w=await crypto.subtle.importKey("raw",p,"PBKDF2",!1,["deriveBits"]),l=o.encode(t),u={name:"PBKDF2",hash:e,salt:l,iterations:r};return await crypto.subtle.deriveBits(u,w,c*8)},d=async e=>{const n=e.slice(0,32),r=e.slice(32);return{key:await crypto.subtle.importKey("raw",n,{name:"AES-CBC"},!1,["encrypt","decrypt"]),iv:r}},f=async(e,t)=>{const r=new TextEncoder("utf-8").encode(e);return await crypto.subtle.encrypt({name:"AES-CBC",iv:t.iv},t.key,r)},b=async(e,t)=>{const n=new TextDecoder("utf-8"),r=await crypto.subtle.decrypt({name:"AES-CBC",iv:t.iv},t.key,e);return n.decode(r)},v=async e=>{const t=await y(s,a,i,1e3,48),n=await d(t);return await f(JSON.stringify(e),n)},x=async e=>{const t=await y(s,a,i,1e3,48),n=await d(t);return await b(e,n)},h=e=>{let t="";const n=new Uint8Array(e),r=n.byteLength;for(let c=0;c<r;c++)t+=String.fromCharCode(n[c]);return window.btoa(t)},m=e=>{const t=window.atob(e),n=t.length,r=new Uint8Array(n);for(let c=0;c<n;c++)r[c]=t.charCodeAt(c);return r.buffer};export{h as _,m as a,x as d,v as e};
